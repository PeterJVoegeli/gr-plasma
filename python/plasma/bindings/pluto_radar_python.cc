/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(usrp_radar.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(abcaa93a8ea387faf927c248eaf93f2e)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/plasma/pluto_radar.h>
// pydoc.h is automatically generated in the build directory
#include <pluto_radar_pydoc.h>

void bind_pluto_radar(py::module& m)
{

    using pluto_radar    = ::gr::plasma::pluto_radar;


    py::class_<pluto_radar, gr::block, gr::basic_block,
        std::shared_ptr<pluto_radar>>(m, "pluto_radar", D(pluto_radar))

        .def(py::init(&pluto_radar::make),
           //py::arg("args"),
           py::arg("tx_rate"),
           py::arg("rx_rate"),
           py::arg("tx_freq"),
           py::arg("rx_freq"),
           py::arg("tx_gain"),
           py::arg("rx_gain"),
           py::arg("start_delay"),
           py::arg("elevate_priority"),
           py::arg("cal_file"),
           py::arg("verbose"),
           py::arg("uri"),
           //py::arg("ctx"),
           py::arg("ch_en"),
           py::arg("buffer_size"),
           py::arg("cyclic"),
           D(pluto_radar,make)
        )
        
        .def("set_frequency", &pluto_radar::source_set_frequency, py::arg("longfrequency"))
        .def("set_samplerate", &pluto_radar::source_set_samplerate, py::arg("samplerate"))
        .def("set_gain_mode",
             &pluto_radar::source_set_gain_mode,
             py::arg("chan"),
             py::arg("mode"))
        .def("set_gain",
             &pluto_radar::source_set_gain,
             py::arg("chan"),
             py::arg("gain_value"))
        .def("set_quadrature", &pluto_radar::source_set_quadrature, py::arg("quadrature"))
        .def("set_rfdc", &pluto_radar::source_set_rfdc, py::arg("rfdc"))
        .def("set_bbdc", &pluto_radar::source_set_bbdc, py::arg("bbdc"))
        .def("set_filter_params", &pluto_radar::source_set_filter_params)
     //   .def(
       //     "set_len_tag_key", &pluto_radar::source_set_len_tag_key, py::arg("len_tag_key"))
        
        .def("set_bandwidth", &pluto_radar::sink_set_bandwidth, py::arg("longbandwidth"))
        .def("set_frequency", &pluto_radar::sink_set_frequency, py::arg("longfrequency"))
        .def("set_samplerate", &pluto_radar::sink_set_samplerate, py::arg("samplerate"))
        .def("set_attenuation",
             &pluto_radar::sink_set_attenuation,
             py::arg("chan"),
             py::arg("attenuation"))
        .def("set_filter_params",
             &pluto_radar::sink_set_filter_params,
             py::arg("filter_source"),
             py::arg("filter_filename") = "",
             py::arg("fpass") = 0.0,
             py::arg("fstop") = 0.0)
        .def("set_len_tag_key",
             &pluto_radar::sink_set_len_tag_key,
             py::arg("len_tag_key") = "")


//        .def("set_buffer_size",
//             &pluto_radar::set_buffer_size,
//             py::arg("buffer_size") = DEFAULT_BUFFER_SIZE,
//             D(pluto_radar, set_buffer_size))

//        .def("set_timeout_ms",
//             &pluto_radar::set_timeout_ms,
//             py::arg("timeout"),
//             D(pluto_radar, set_timeout_ms))


        
        .def("set_metadata_keys",
             &pluto_radar::set_metadata_keys,
             py::arg("tx_freq_key"),
             py::arg("rx_freq_key"),
             py::arg("sample_start_key"),
             D(pluto_radar, set_metadata_keys))

        ;




}








