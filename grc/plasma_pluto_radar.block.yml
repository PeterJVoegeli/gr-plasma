id: plasma_pluto_radar
label: "AD: PLUTO Radar"
category: "[plasma]"

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
#  - id: args
 #   label: Device Arguments
  #  dtype: string
   # default: '""'
    
#-   id: type
 #   label: Output Type
  #  dtype: enum
   # options: [fc32, sc16]
    #option_labels: [Complex float32, Complex int16]
    #option_attributes:
    #    type: [fc32, sc16]
    #hide: part

-   id: uri
    label: IIO context URI
    dtype: string
    default: 'ip:192.168.2.1'

-   id: frequency
    label: LO Frequency
    dtype: int
    default: 2400000000

-   id: samp_rate
    label: Sample Rate
    dtype: int
    default: "samp_rate"

-   id: buffer_size
    label: Buffer size
    dtype: int
    default: 0x8000

-   id: quadrature
    label: Quadrature
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['False', 'True']

-   id: rfdc
    label: RF DC Correction
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['False', 'True']

-   id: bbdc
    label: BB DC Correction
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['False', 'True']

-   id: gain1
    label: Gain Mode (RX1)
    dtype: enum
    default: "'slow_attack'"
    options: ["'manual'", "'slow_attack'", "'fast_attack'", "'hybrid'"]
    option_labels: ['Manual', 'Slow Attack', 'Fast Attack', 'Hybrid']

-   id: manual_gain1
    label: Manual Gain (RX1)(dB)
    dtype: float
    default: 64
    hide: ${ ('none' if gain1 == "'manual'" else 'all') }

-   id: len_tag_key
    label: Packet Length Tag
    dtype: string
    default: packet_len
    hide: part

-   id: filter_source
    category: Filter
    label: Filter Configuration
    dtype: enum
    default: "'Auto'"
    options: ["'Off'", "'Auto'", "'File'", "'Design'"]
    option_labels: ['Off', 'Auto', 'File', 'Design']

-   id: filter
    category: Filter
    label: Filter
    dtype: file_open
    default: ''
    hide: ${ ('none' if filter_source == "'File'" else 'all') }

-   id: fpass
    category: Filter
    label: Fpass (Hz)
    dtype: float
    default: 0
    hide: ${ ('none' if filter_source == "'Design'" else 'all') }

-   id: fstop
    category: Filter
    label: Fstop (Hz)
    dtype: float
    default: 0
    hide: ${ ('none' if filter_source == "'Design'" else 'all') }

-   id: bandwidth
    category: Filter
    label: RF Bandwidth (Hz)
    dtype: int
    default: 20000000
    hide: ${ ('all' if filter_source == "'File'" else 'none') }


    
-   id: tx_freq
    label: Tx Frequency
    dtype: float
    default: "Center_freq"
    
-   id: rx_freq
    label: Rx Frequency
    dtype: float
    default: "Center_freq"
    
-   id: tx_gain
    label: Tx Gain (dB)
    dtype: float
    default: 0
    
-   id: rx_gain
    label: Rx Gain (dB)
    dtype: float
    default: 0
    
-   id: start_delay
    label: Start Delay
    dtype: float
    default: 0.1
    
-   id: elevate_priority
    label: Elevate thread priority
    dtype: bool
    options: [False, True]
    default: False
    hide: ${ ('part' if elevate_priority == False else 'none') }
    
-   id: cal_file
    label: Calibration file
    dtype: file_save
    default: '""'
    hide: part
    
-   id: verbose
    label: Verbose
    dtype: bool
    options: [False, True]
    default: False
    hide: part

-   id: buffer_size
    label: Buffer size
    dtype: int
    default: 0x8000

-   id: tx1_en
    label: TX1 Enabled
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['False', 'True']

-   id: tx2_en
    label: TX2 Enabled
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['False', 'True']
    
-   id: cyclic
    label: Cyclic
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['False', 'True']
    
-   id: rf_port_select
    label: RF Port Select
    dtype: enum
    default: "'A'"
    options: ["'A'", "'B'"]
    option_labels: ['A', 'B']
    
  # Metadata keys
  
-   id: tx_freq_key
    label: Tx frequency key
    dtype: string
    default: core:tx_freq
    hide: part
    category: Metadata
    
-   id: rx_freq_key
    label: Rx frequency key
    dtype: string
    default: core:rx_freq
    hide: part
    category: Metadata
    
-   id: sample_start_key
    label: Sample start key
    dtype: string
    default: core:sample_start
    hide: part
    category: Metadata

inputs:
-   id: in
    domain: message
    optional: true

outputs:
-   id: out
    domain: message
    optional: true


#asserts:
#- ${ ((samp_rate>=2084000) or (filter_source!="'Off'")) }
#- ${ ((filter_source!="'File'") or (len(filter)>0)) }
#- ${ ((samp_rate<=61440000) and (samp_rate>=65105)) }
#- ${ ((bandwidth<=52000000) and (bandwidth>=200000)) }
#- ${ ((frequency<=60000000000) and (frequency>=70000000)) }
#- ${ ((filter_source!="'Design'") or (fpass<=samplerate)) }
#- ${ ((filter_source!="'Design'") or (fstop<=samplerate)) }
#- ${ ((filter_source!="'Design'") or (fstop>fpass)) }

#templates:
#    imports: from gnuradio import iio
 #   make: |
  #      iio.fmcomms2_source_${type.type}(${uri} if ${uri} else iio.get_pluto_uri(), [True, True], ${buffer_size})
   #     self.${id}.set_len_tag_key(${len_tag_key})
    #    self.${id}.set_frequency(${frequency})
     #   self.${id}.set_samplerate(${samplerate})
      #  self.${id}.set_gain_mode(0, ${gain1})
       # self.${id}.set_gain(0, ${manual_gain1})
#        self.${id}.set_quadrature(${quadrature})
 #       self.${id}.set_rfdc(${rfdc})
  #      self.${id}.set_bbdc(${bbdc})
   #     self.${id}.set_filter_params(${filter_source}, ${filter}, ${fpass}, ${fstop})
    #callbacks:
     #   - set_frequency(${frequency})
      #  - set_samplerate(${samplerate})
       # - set_gain_mode(0, ${gain1})
        #- set_gain(0, ${manual_gain1})
#        - set_quadrature(${quadrature})
 #       - set_rfdc(${rfdc})
   #     - set_bbdc(${bbdc})
  #      - set_filter_params(${filter_source}, ${filter}, ${fpass}, ${fstop})
        
templates:
  imports: from gnuradio import plasma
  make: |-
    plasma.pluto_radar(${samp_rate}, ${samp_rate}, ${tx_freq}, ${rx_freq}, ${tx_gain}, ${rx_gain}, ${start_delay}, ${elevate_priority}, ${cal_file}, ${verbose}, ${uri}, ${uri}, [tx1_en, tx2_en], ${buffer_size}, ${cyclic})
    self.${id}.set_metadata_keys(${tx_freq_key}, ${rx_freq_key}, ${sample_start_key})
    self.${id}.set_len_tag_key(${len_tag_key})
    self.${id}.set_frequency(${frequency})
    self.${id}.set_samplerate(${samp_rate})
    self.${id}.set_gain_mode(0, ${gain1})
    self.${id}.set_gain(0, ${manual_gain1})
    self.${id}.set_quadrature(${quadrature})
    self.${id}.set_rfdc(${rfdc})
    self.${id}.set_bbdc(${bbdc})
    self.${id}.set_filter_params(${filter_source}, ${filter}, ${fpass}, ${fstop})
#  callbacks:
 #       - set_frequency(${frequency})
  #      - set_samplerate(${samp_rate})
   #     - set_gain_mode(0, ${gain1})
    #    - set_gain(0, ${manual_gain1})
     #   - set_quadrature(${quadrature})
      #  - set_rfdc(${rfdc})
       # - set_bbdc(${bbdc})
        #- set_filter_params(${filter_source}, ${filter}, ${fpass}, ${fstop})
    
    
    
#    plasma.pluto_radar( ${args}, ${samp_rate}, ${samp_rate}, ${tx_freq}, ${rx_freq}, ${tx_gain}, ${rx_gain}, ${start_delay}, ${elevate_priority}, ${cal_file}, ${verbose})
    
    

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
